import random
import time
import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton


# –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
BOT_TOKEN = "6130093637:AAFotIhshAqeNMTtKuOXxd1qvbkTyFDC8Uo"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
CARD_RARITIES = {
    "default": {"value": 100},
    "rare": {"value": 250},
    "epic": {"value": 500},
    "a": {"value": 100},
    "collection": {"value": 5000},
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è rare
image1 = "https://disk.yandex.ru/i/DmC1WQzluV3amg"
image2 = "https://disk.yandex.ru/i/7zY_OAfrtYMGwA"
image3 = "https://disk.yandex.ru/i/5UwTO2DhdN5sLw"
image4 = "https://disk.yandex.ru/i/QN0iTqQbbjN1CQ"
image5 = "https://disk.yandex.ru/i/nYcuJzBF0C0-XA"
image6 = "https://disk.yandex.ru/i/liiro4k6jwz2DA"
image7 = "https://disk.yandex.ru/i/-JdFcVLRIXNRww"
image8 = "https://disk.yandex.ru/i/xHOwxkmVlT0ing"
image9 = "https://disk.yandex.ru/i/fbE1fq2I-3qNXQ"
image10 = "https://disk.yandex.ru/i/2eK5Wv3d0YuteQ"
image11 = "https://disk.yandex.ru/i/cRQSHM0I09VrZw"
image12 = "https://disk.yandex.ru/i/uTRdoWEVczwSBQ"
image13 = "https://disk.yandex.ru/i/FqDZRLPSTeOXDQ"
image14 = "https://disk.yandex.ru/i/4H3qaCSeYdBd9A"
image15 = "https://disk.yandex.ru/i/leVkWaSE0e36HA"
image16 = "https://disk.yandex.ru/i/OAyArYIzy6gLMg"
image17 = "https://disk.yandex.ru/i/Uy5GlW43GXWjvg"
image18 = "https://disk.yandex.ru/i/TlNXr2yIeYDz6g"
image19 = "https://disk.yandex.ru/i/av1Znpc70IcgJA"
image20 = "https://disk.yandex.ru/i/EKth2aniRtcyQg"
image21 = "https://disk.yandex.ru/i/WHSdEDUjVjp7yQ"
image22 = "https://disk.yandex.ru/i/ieDjY0S26t2p2Q"
image23 = "https://disk.yandex.ru/i/d0uZz3VKb5YVUQ"
image24 = "https://disk.yandex.ru/i/ZEdwjijNFVWhzA"
image25 = "https://disk.yandex.ru/i/EptbQV2CnMdCHQ"
image26 = "https://disk.yandex.ru/i/fFGaSKl-RdXdjQ"
image27 = "https://disk.yandex.ru/i/ww4z2xPcw8M3xg"
image28 = "https://disk.yandex.ru/i/6Oq8sHRmr1RJLg"
image29 = "https://disk.yandex.ru/i/BEYauCvr5GfktQ"
image30 = "https://disk.yandex.ru/i/0ftVfV_1BOdrjQ"

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π —Ä–µ–¥–∫–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
cards = [
    {"url": image1, "rarity": "rare"},
    {"url": image2, "rarity": "rare"},
    {"url": image3, "rarity": "rare"},
    {"url": image4, "rarity": "rare"},
    {"url": image5, "rarity": "rare"},
    {"url": image6, "rarity": "rare"},
    {"url": image7, "rarity": "rare"},
    {"url": image8, "rarity": "rare"},
    {"url": image9, "rarity": "rare"},
    {"url": image10, "rarity": "rare"},
    {"url": image11, "rarity": "rare"},
    {"url": image12, "rarity": "rare"},
    {"url": image13, "rarity": "rare"},
    {"url": image14, "rarity": "rare"},
    {"url": image15, "rarity": "rare"},
    {"url": image16, "rarity": "rare"},
    {"url": image17, "rarity": "rare"},
    {"url": image18, "rarity": "rare"},
    {"url": image19, "rarity": "rare"},
	{"url": image20, "rarity": "rare"},
    {"url": image21, "rarity": "rare"},
    {"url": image22, "rarity": "rare"},
    {"url": image23, "rarity": "rare"},
    {"url": image24, "rarity": "rare"},
    {"url": image25, "rarity": "rare"},
    {"url": image26, "rarity": "rare"},
    {"url": image27, "rarity": "rare"},
    {"url": image28, "rarity": "rare"},
    {"url": image29, "rarity": "rare"},
    {"url": image30, "rarity": "rare"},
]

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—É—Ä—Å–æ—Ä–∞
conn = sqlite3.connect("user_data.db")
cursor = conn.cursor()

# –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã, –¥–æ–±–∞–≤–∏–≤ –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É acquisition_time
cursor.execute('''CREATE TABLE IF NOT EXISTS user_cards
                  (user_id INTEGER, card_url TEXT, rarity TEXT, style INTEGER, acquisition_time INTEGER)''')
conn.commit()

trade_offers = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
def can_get_new_card(user_id, crafting=False):
    cursor.execute("SELECT last_request_time FROM user_cards WHERE user_id=?", (user_id,))
    last_request_time = cursor.fetchone()

    if not last_request_time or last_request_time[0] is None:
        return True

    current_time = int(time.time())
    last_request_time = last_request_time[0]

    if crafting:
        return True

    next_request_time = last_request_time + 14400
    remaining_time = next_request_time - current_time
    return remaining_time <= 0



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
def format_time(seconds):
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ä—Ç—ã
def update_last_request_time(user_id, current_time):
    cursor.execute("UPDATE user_cards SET last_request_time=? WHERE user_id=?", (current_time, user_id))
    conn.commit()


bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot=bot)

main = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
main.add("–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", "–ú–æ–∏ –∫–∞—Ä—Ç—ã").add("Spot Studio")

studio_list = InlineKeyboardMarkup(row_width=1)
studio_list.add(InlineKeyboardButton(text="Trade", callback_data="ttrraaddee"),
                InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="game"),
                InlineKeyboardButton(text="–ö—Ä–∞—Ñ—Ç", callback_data="craft_menu"))


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(f""" 
    üî•{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BRANDSüî•

üí•–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ –ø–æ –º–æ—Ç–∏–≤–∞–º –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤, –∏–¥–µ—è –≤–∑—è—Ç–∞ —Å–æ SPOTüí•

üëæ–ü—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ —Å–≤–æ–∏–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ —É—á–∞–≤—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –Ω–∞ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ãüëæ

–î—É–º–∞—é —Å—É—Ç—å —è—Å–Ω–∞, —á—Ç–æ-–∂, –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å?üôÇ
    """,
                         reply_markup=main)


@dp.message_handler(text="–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É")
async def send_image(message: types.Message):
    user_id = message.from_user.id

    if not can_get_new_card(user_id):
        cursor.execute("SELECT last_request_time FROM user_cards WHERE user_id=?", (user_id,))
        last_request_time = cursor.fetchone()[0]
        next_request_time = last_request_time + 14400
        remaining_time = next_request_time - int(time.time())
        remaining_time_formatted = format_time(remaining_time)
        await message.answer(f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: {remaining_time_formatted}.")
        return

    card = random.choice(cards)
    card_url = card["url"]
    card_rarity = card["rarity"]
    style_value = CARD_RARITIES[card_rarity]["value"]

    await bot.send_photo(chat_id=user_id, photo=card_url)

    current_time = int(time.time())
    cursor.execute(
        "INSERT INTO user_cards (user_id, card_url, rarity, style, acquisition_time) VALUES (?, ?, ?, ?, ?)",
        (user_id, card_url, card_rarity, style_value, current_time))
    conn.commit()

    update_last_request_time(user_id, current_time)  # Update last_request_time



@dp.message_handler(text="–ú–æ–∏ –∫–∞—Ä—Ç—ã")
async def show_user_cards(message: types.Message):
    cursor.execute("SELECT card_url, style FROM user_cards WHERE user_id=?", (message.from_user.id,))
    user_cards = cursor.fetchall()

    if user_cards:
        await show_user_card_with_keyboard(message.from_user.id, user_cards, 0)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")


async def show_user_card_with_keyboard(user_id, user_cards, current_index, message_id=None, trade_mode=False):
    card_url, style_value = user_cards[current_index]
    inline_keyboard = InlineKeyboardMarkup(row_width=3)

    if current_index > 0:
        inline_keyboard.insert(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"card_{current_index - 1}"))

    cards_count = len(user_cards)
    current_card_index = current_index + 1
    inline_keyboard.insert(
        InlineKeyboardButton(f"–ö–∞—Ä—Ç–∞ {current_card_index}/{cards_count}", callback_data="dummy")
    )

    if current_index < cards_count - 1:
        inline_keyboard.insert(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"card_{current_index + 1}"))

    if trade_mode:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ–±–º–µ–Ω–∞
        inline_keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω", callback_data=f"trade_{current_index}"))

    media = types.InputMediaPhoto(card_url, caption=f"Style: {style_value}")

    if message_id is not None:
        await bot.edit_message_media(
            media=media, chat_id=user_id, message_id=message_id, reply_markup=inline_keyboard
        )
    else:
        await bot.send_photo(
            chat_id=user_id, photo=card_url, caption=f"Style: {style_value}", reply_markup=inline_keyboard
        )


@dp.callback_query_handler(lambda c: c.data.startswith('card_'))
async def show_next_card(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    current_index = int(callback_query.data.split('_')[1])

    cursor.execute("SELECT card_url, style FROM user_cards WHERE user_id=?", (user_id,))
    user_cards = cursor.fetchall()

    if 0 <= current_index < len(user_cards):
        await show_user_card_with_keyboard(user_id, user_cards, current_index, callback_query.message.message_id)
    else:
        await callback_query.answer("–ö–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", show_alert=True)


@dp.message_handler(text="Spot Studio")
async def studio(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é!", reply_markup=studio_list)






@dp.callback_query_handler(text="craft_menu")
async def craft_menu(callback: types.CallbackQuery):
    await craft_menu_callback(callback)


def get_duplicate_counts(user_id):
    cursor.execute("SELECT rarity, COUNT(*) FROM user_cards WHERE user_id=? AND rarity!='default' GROUP BY rarity", (user_id,))
    duplicate_counts = dict(cursor.fetchall())
    for rarity in CARD_RARITIES.keys():
        duplicate_counts.setdefault(rarity, 0)
    return duplicate_counts

async def craft_menu_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    duplicate_counts = get_duplicate_counts(user_id)

    duplicate_counts_text = "\n".join([f"{rarity.capitalize()}: {count}" for rarity, count in duplicate_counts.items()])

    message_text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏:\n{duplicate_counts_text}"

    await callback.message.answer(message_text, reply_markup=craft_keyboard)

def get_rarity_counts(user_id):
    cursor.execute("SELECT rarity, COUNT(*) FROM user_cards WHERE user_id=? GROUP BY rarity", (user_id,))
    rarity_counts = dict(cursor.fetchall())
    return rarity_counts



# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
craft_keyboard = InlineKeyboardMarkup(row_width=1)
craft_keyboard.add(
    InlineKeyboardButton(text="–ö—Ä–∞—Ñ—Ç –∏–∑ 5 Default", callback_data="craft_default"),
    InlineKeyboardButton(text="–ö—Ä–∞—Ñ—Ç –∏–∑ 5 Rare", callback_data="craft_rare"),
    InlineKeyboardButton(text="–ö—Ä–∞—Ñ—Ç –∏–∑ 5 Epic", callback_data="craft_epic")
)


@dp.message_handler(text="–ö—Ä–∞—Ñ—Ç")
async def craft_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:", reply_markup=craft_keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('craft_'))
async def craft_callback(callback_query: types.CallbackQuery):
    target_rarity = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    if target_rarity == "default":
        if not can_get_new_card(user_id):
            cursor.execute("SELECT last_request_time FROM user_cards WHERE user_id=?", (user_id,))
            last_request_time = cursor.fetchone()[0]
            next_request_time = last_request_time + 14400
            remaining_time = next_request_time - int(time.time())
            remaining_time_formatted = format_time(remaining_time)
            await callback_query.message.answer(f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑: {remaining_time_formatted}.")
            return

    craft_result = await craft_card(user_id, target_rarity)
    await callback_query.answer(craft_result, show_alert=True)

def increase_rarity(rarity):
    higher_rarities = ["rare", "epic"]
    if rarity in higher_rarities:
        higher_rarity = higher_rarities.index(rarity) + 1
        if higher_rarity < len(higher_rarities):
            return higher_rarities[higher_rarity]
    return rarity

def generate_new_card_url(target_rarity):
    higher_rarities = ["rare", "epic"]  # –°–ø–∏—Å–æ–∫ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π

    if target_rarity in higher_rarities:
        higher_rarity = higher_rarities.index(target_rarity) - 1
        new_rarity = higher_rarities[higher_rarity]
    else:
        new_rarity = random.choice(higher_rarities)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é —Ä–µ–¥–∫–æ—Å—Ç—å

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç —Å –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç—å—é
    new_image_url = new_rarity
    return new_image_url


async def craft_card(user_id, target_rarity):
    cursor.execute("SELECT COUNT(*) FROM user_cards WHERE user_id=? AND rarity=?", (user_id, target_rarity))
    card_count = cursor.fetchone()[0]

    if card_count < 5:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞."

    # –ü–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
    cursor.execute(
        "SELECT card_url FROM user_cards WHERE user_id=? AND rarity=? LIMIT 5", (user_id, target_rarity)
    )
    cards_for_craft = cursor.fetchall()

    # –£–¥–∞–ª–∏—Ç–µ –∫–∞—Ä—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "DELETE FROM user_cards WHERE rowid IN (SELECT rowid FROM user_cards WHERE user_id=? AND rarity=? LIMIT 5)",
        (user_id, target_rarity)
    )
    conn.commit()

    # –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –Ω—É–∂–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    new_card_rarity = increase_rarity(target_rarity)
    new_card_url = generate_new_card_url(new_card_rarity)

    # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    current_time = int(time.time())
    cursor.execute(
        "INSERT INTO user_cards (user_id, card_url, rarity, style, last_request_time) VALUES (?, ?, ?, ?, ?)",
        (user_id, new_card_url, new_card_rarity, 0, current_time)
    )
    conn.commit()

    return f"–ö—Ä–∞—Ñ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞: {new_card_url} (–†–µ–¥–∫–æ—Å—Ç—å: {new_card_rarity.capitalize()})"

def increase_rarity(rarity):
    higher_rarities = ["rare", "epic"]
    if rarity in higher_rarities:
        higher_rarity = higher_rarities.index(rarity) + 1
        if higher_rarity < len(higher_rarities):
            return higher_rarities[higher_rarity]
    return rarity


# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

@dp.callback_query_handler(text="ttrraaddee")
async def start_trade(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # Retrieve the user's cards from the database
    cursor.execute("SELECT card_url, rarity FROM user_cards WHERE user_id=?", (user_id,))
    user_cards = cursor.fetchall()

    # Show the user's collection and allow them to select cards for trade
    await show_user_card_with_keyboard(user_id, user_cards, 0, callback_query.message.message_id, trade_mode=True)


@dp.callback_query_handler(lambda c: c.data.startswith('trade_'))
async def start_trade(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    current_index = int(callback_query.data.split('_')[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT card_url, rarity FROM user_cards WHERE user_id=?", (user_id,))
    user_cards = cursor.fetchall()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞
    await show_user_card_with_keyboard(user_id, user_cards, current_index, callback_query.message.message_id, trade_mode=True)


@dp.message_handler(lambda message: message.text.startswith('@'), state=None)
async def enter_username(message: types.Message):
    user_id = message.from_user.id
    username = message.text

    if user_id in trade_offers:
        cards_offered = trade_offers.pop(user_id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞
        offer_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –æ–±–º–µ–Ω:\n"
        for card in cards_offered:
            offer_message += f"- –ö–∞—Ä—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏ {card['rarity']}\n"
        inline_keyboard = InlineKeyboardMarkup()
        inline_keyboard.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}"),
                            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}"))
        await bot.send_message(username, offer_message, reply_markup=inline_keyboard)
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±–º–µ–Ω–∞ –¥–ª—è –≤–∞—Å.")


@dp.callback_query_handler(lambda c: c.data.startswith('accept_') or c.data.startswith('reject_'))
async def respond_to_trade(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    action = callback_query.data.split('_')[0]
    offerer_user_id = int(callback_query.data.split('_')[1])

    if action == 'accept':
        # –û–±–Ω–æ–≤–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —ç—Ç—É –ª–æ–≥–∏–∫—É)
        await bot.send_message(offerer_user_id, "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ!")
        await callback_query.answer("–û–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç!")
    elif action == 'reject':
        await bot.send_message(offerer_user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞.")
        await callback_query.answer("–û–±–º–µ–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)